function [is_valid,reason] = is_input_valid(app,type)
%IS_INPUT_VALID Check if the input entered by the user is valid
    is_valid = 1;
    reason = '';
    
    switch type
        case 'osc'
            path = app.PathEditField.Value;
            ip = app.IPAddressEditField.Value;
            port = app.PortEditField.Value;
            [is_valid,reason] = check_osc_receiver(path,ip,port);
        case 'spr'
            window_size = SPRWindowEditField.Value;
            time_bandwith_product = SPRTimeBandwithProductEditField.Value;
            number_tapers = SPRNumberTapersEditField.Value;
            theta_bandwith = SPRThetaBandwithEditField.Value;
            is_theta = SPRThetaBandwithCheckBox.Value;
            alpha_bandwith = SPRAlphaBandwithEditField.Value;
            is_alpha = SPRAlphaBandwithCheckBox.Value;
            beta_bandwith = SPRBetaBandwithEditField.Value;
            is_beta = SPRBetaBandwithCheckBox.Value;
            averaging_size = SPRAveragingSizeEditField.Value;
            %TODO CHECK THE REST
            [is_valid,reason] = check_spr(window_size,time_bandwith_product,number_tapers, ...
                                theta_bandwith,is_theta,alpha_bandwith,is_alpha,beta_bandwith,...
                                is_beta,averaging_size)
        case 'td'
            
        case 'pac'
            
        case 'fp_wpli'
            
        case 'fp_dpli'
            
        case 'hl'
            
        case 'pe'
    end

end

function [is_valid,reason] = check_osc_receiver(path,ip,port)
    is_valid = 1;
    reason = "";
    %% PATH 
    %(Not sure what to check, empty for now)
    is_empty = path == "";
    if(is_empty)
       is_valid = 0;
       reason = reason + "Path is empty. ";
    end
    %% IP (Must contain numbers and dots)
    
    is_dot = ~isempty(strfind(ip,'.'));
    if(is_dot == 0)
       is_valid = 0; 
       reason = reason + "IP contains no dots. ";
    end
    is_number =  all(ismember(erase(ip,'.'),'0123456789'));
    if(is_number == 0)
        is_valid = 0;
        reason = reason + "IP contains an illegal character. ";
    end
    %% PORT (Must contain only numbers)
    % TODO Could also list the ports and check if right one choosen.
    is_number = all(ismember(port,'0123456789'));
    if(is_number == 0)
       is_valid = 0;
       reason = reason + "Port contains an illegal character. ";
    end
end

function [is_valid,reason] = check_spr(window_size,time_bandwith_product,number_tapers, ...
                             theta_bandwith,is_theta,alpha_bandwith,is_alpha,beta_bandwith,...
                             is_beta,averaging_size)
    is_valid = 1;
    reason = "";
    
    % For most of the variable we don't need to check for ridiculous inputs
    % as the application already take care of that
    
    %% Window Size and Averaging Size
    if(averaging_size < window_size)
       is_valid = 0;
       reason = reason + "Window size is longer than the averaging size. ";
    end
    
    %% Theta Bandwith
    if(is_theta)
        theta_bandwith = erase(theta_bandwith,'[');
        theta_bandwith = erase(theta_bandwith,']');
        theta_bandwith = str2double(strsplit(theta_bandwith,{',',' '}));
        if(length(theta_bandwith) ~= 2)
           is_valid = 0;
           reason = reason + "Theta Bandwith is malformated: require [x,y]. "
        else
            if(theta_bandwith(1) >= theta_bandwith(2))
               is_valid = 0;
               reason = reason + "Theta Bandwith first value is greater than the second. ";
            end
        end
    end
    
    %% Alpha Bandwith
    if(is_alpha)
        
    end
    
    %% Beta Bandwith
    if(is_beta)
        
    end
    

end

function [is_valid,reason] = check_bandwith(is_valid,bandwith)
    reason = "";
end